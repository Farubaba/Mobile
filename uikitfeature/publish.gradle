
//参考 ： https://github.com/bintray/bintray-examples/blob/master/gradle-bintray-plugin-examples/android-gradle-3.0.0-maven-example/app/publish.gradle

/**
 * 【使用Gradle上传aar到jcenter】
 *
 *  主要文件：
 *  1）project根目录build.gradle
 *  2) module目录下build.gradle
 *  3) module目录下publish.gradle
 *  4) module目录下gradle.properties
 *
 * 使用本文件时，在module的build.gradle文件末尾添加一行：
 *
 *      apply from: 'publish.gradle'
 *
 * 1、[gradle-bintray-plugin插件文档]:
 *
 *      https://github.com/bintray/gradle-bintray-plugin#readme
 *
 * 2、[android-maven-gradle-plugin，在gradle中使用maven来publish上传文件到jcenter私有仓库] :
 *
 *      https://github.com/dcendents/android-maven-gradle-plugin
 *
 * 3、[编写gradle.properties文件,定义属性]:
 *
 *      bintrayUser=farubaba
 *      bintrayApiKey=7b2db169d93937cdbe362035739593d75069e4b9f
 *      bintrayRepo=android
 *      bintrayPackage=newaarmodule
 *
 * 4、[编写独立的publish.gradle文档]:
 *
 *      https://github.com/bintray/bintray-examples/blob/master/gradle-bintray-plugin-examples/android-gradle-3.0.0-maven-example/app/publish.gradle
 *
 * 5、[引入源码jar包]：
 *
 * 6、[执行命令，上传到jcenter私有仓库]:
 *
 *      执行所有module：./gradlew clean build bintrayUpload --stacktrace --info
 *      执行指定module：./gradlew :newaarmodule:clean :newaarmodule:build :newaarmodule:bintrayUpload --stacktrace --info
 *
 *      跳过测试：
 *      ./gradlew :uikitfeature:clean :uikitfeature:build :uikitfeature:bintrayUpload --stacktrace --info -x test
 *
 ***********************************************************/

//放入项目根目录下的build.gradle文件中，如果不设置，则需要在module的build.gradle文件中设置plugins{}来替代
//classpath 'com.github.dcendents:android-maven-gradle-plugin:2.0'
//classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.8.0'

//plugins {
//    id "com.github.dcendents.android-maven" version "2.1"
//}

//apply plugin: 'com.github.dcendents.android-maven' //该插件提供了install方法来上传
apply plugin: 'maven-publish' //该插件中提供了publishing方法来上传
apply plugin: 'com.jfrog.bintray'

/**为plugin中预定义的变量赋值**/
group this.pkgGroupId
version this.pkgVersion

/*******************************************publishing 方式上传start*********************************************/
/***打包javadoc 和sourcesJar**/
task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}
//task javadoc(type: Javadoc) {
//    options {
//        encoding "UTF-8"
//        charSet 'UTF-8'
//        author true
//        version true
//        links "http://docs.oracle.com/javase/7/docs/api"
//    }
//    source = android.sourceSets.main.java.srcDirs
//    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
//}
//task javadocJar(type: Jar, dependsOn: javadoc) {
//    classifier = 'javadoc'
//    from javadoc.destinationDir
//}

/***会上传所有的jar，aar等archives****/
artifacts {
    //archives javadocJar
    archives sourcesJar
}

/**
 * 要使用publishing，则需要引入如下插件，该插件中提供了publishing方法来上传
 * apply plugin: 'maven-publish'
 * 同时，记得反注释bintray中publications行
 * bintray{
 *   //FIXME 此行只有使用publishing来上传时才需要，如果使用install方法来上传，则需要注释掉此行。
 *   publications = ['Production']
 * }
 *
 */

publishing {
    publications {
        Production(MavenPublication) {
//            artifact("$buildDir/outputs/aar/${this.pkgArtifactId}-release.aar")
//            artifacts {
//                archives javadocJar
//                archives sourcesJar
//            }
            groupId this.group
            artifactId this.pkgArtifactId
            version this.version

            pom.withXml {
                def dependenciesNode = asNode().appendNode('dependencies')

                // Iterate over the implementation dependencies (we don't want the test ones), adding a <dependency> node for each
                configurations.implementation.allDependencies.each {
                    // Ensure dependencies such as fileTree are not included in the pom.
                    if (it.name != 'unspecified') {
                        def dependencyNode = dependenciesNode.appendNode('dependency')
                        dependencyNode.appendNode('groupId', it.group)
                        dependencyNode.appendNode('artifactId', it.name)
                        dependencyNode.appendNode('version', it.version)
                    }
                }
            }
        }
    }
}

/*******************************************publishing 方式上传end*********************************************/

bintray {
//    user = project.hasProperty('bintrayUser') ?: System.getenv('BINTRAY_USER')
//    key = project.hasProperty('bintrayApiKey') ?: System.getenv('BINTRAY_API_KEY')
    user = this.bintrayUser ?: System.getenv('BINTRAY_USER')
    key = this.bintrayApiKey ?: System.getenv('BINTRAY_API_KEY')
    publications = ['Production'] //FIXME 此行只有使用publishing来上传时才需要，如果使用install方法来上传，则需要注释掉此行。
    configurations = ['archives']
    override = true
    pkg {
        repo = this.bintrayRepo //bintray 仓库名称
        name = this.bintrayPackage // bintray 仓库中 packge name
        description = "An example of using the bintray plugin with gradle plugin 3.0.0"
        publish = true
        dryRun = false //设置成true，则不能上传，why？
        publicDownloadNumbers = true
        licenses = ['Apache-2.0']
        vcsUrl = this.vcsUrl
        issueTrackerUrl = this.issueUrl
        websiteUrl = this.siteUrl
        version {
            name = this.version
            desc = "${this.pkgArtifactId} ${this.version}"
            released = new Date()
            vcsTag = this.version
        }

    }
}
/***************************************************************************/
/** Plugin DSL : https://github.com/bintray/gradle-bintray-plugin#readme  **/
/***************************************************************************/
/**
 * bintray {
 *     user = 'bintray_user'
 *     key = 'bintray_api_key'
 *
 *     configurations = ['deployables'] //When uploading configuration files
 *     // - OR -
 *     publications = ['mavenStuff'] //When uploading Maven-based publication files
 *     // - AND/OR -
 *     filesSpec { //When uploading any arbitrary files ('filesSpec' is a standard Gradle CopySpec)
 *         from 'arbitrary-files'
 *         into 'standalone_files/level1'
 *         rename '(.+)\\.(.+)', '$1-suffix.$2'
 *     }
 *     dryRun = false //[Default: false] Whether to run this as dry-run, without deploying
 *     publish = true //[Default: false] Whether version should be auto published after an upload
 *     override = false //[Default: false] Whether to override version artifacts already published
 *     //Package configuration. The plugin will use the repo and name properties to check if the package already exists. In that case, there's no need to configure the other package properties (like userOrg, desc, etc).
 *     pkg {
 *         repo = 'myrepo'
 *         name = 'mypkg'
 *         userOrg = 'myorg' //An optional organization name when the repo belongs to one of the user's orgs
 *         desc = 'what a fantastic package indeed!'
 *         websiteUrl = 'https://github.com/bintray/gradle-bintray-plugin'
 *         issueTrackerUrl = 'https://github.com/bintray/gradle-bintray-plugin/issues'
 *         vcsUrl = 'https://github.com/bintray/gradle-bintray-plugin.git'
 *         licenses = ['Apache-2.0']
 *         labels = ['gear', 'gore', 'gorilla']
 *         publicDownloadNumbers = true
 *         attributes= ['a': ['ay1', 'ay2'], 'b': ['bee'], c: 'cee'] //Optional package-level attributes
 *
 *         githubRepo = 'bintray/gradle-bintray-plugin' //Optional Github repository
 *         githubReleaseNotesFile = 'README.md' //Optional Github readme file
 *
 *         //Optional Debian details
 *         debn {
 *             distribution = 'squeeze'
 *             component = 'main'
 *             architecture = 'i386,noarch,amd64'
 *         }
 *         //Optional version descriptor
 *         version {
 *             name = '1.3-Final' //Bintray logical version name
 *             desc = //Optional - Version-specific description'
 *             released  = //Optional - Date of the version release. 2 possible values: date in the format of 'yyyy-MM-dd'T'HH:mm:ss.SSSZZ' OR a java.util.Date instance
 *             vcsTag = '1.3.0'
 *             attributes = ['gradle-plugin': 'com.use.less:com.use.less.gradle:gradle-useless-plugin'] //Optional version-level attributes
 *             //Optional configuration for GPG signing
 *           gpg {
 *                 sign = true //Determines whether to GPG sign the files. The default is false
 *                 passphrase = 'passphrase' //Optional. The passphrase for GPsigning'*             }
 *             //Optional configuration for Maven Central sync of the version
 *           mavenCentralSync {
 *                 sync = true //[Default: true] Determines whether to sync the version to Maven Central.
 *                 user = 'userToken' //OSS user token: mandatory
 *                 password = 'paasword' //OSS user password: mandatory
 *                 close = '1' //Optional property. By default the staging repository is closed and artifacts are released to Maven Central. You can optionally turn this behaviour off (by puting 0 as value) and releasemuay.*             }
 *         }
 *     }
 * }
 */
